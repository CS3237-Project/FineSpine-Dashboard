# -*- coding: utf-8 -*-
"""Posture.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZmxIfhohFLqpTBri4xLVwgC3swsaLrAH
"""

import numpy as np
import pandas as pd
from flask import Flask, request, jsonify, make_response
from flask_cors import CORS

flask_app = Flask(__name__)
cors = CORS(flask_app);

@flask_app.route("/processData", methods=["GET"])
def processData():
  postureRatio = ''
  activityRatio = ''
  activityData = ''
  postureData = ''

  try:
    df_activity = pd.read_csv(r'./data/UserActivity.txt', header=None, error_bad_lines=False)
  except:
    df_activity = pd.DataFrame()

  if not df_activity.empty:
    df_activity.dropna()
    df_activity.columns = ["time", "activity"]
    df_activity['activity'].value_counts()
    activityRatio = [df_activity['activity'].value_counts().Sitting, df_activity['activity'].value_counts().Standing, df_activity['activity'].value_counts().Walking]
    df_activity['time'] = pd.to_datetime(df_activity['time'])  
    df_activity.groupby([df_activity['time'].dt.hour]).activity.value_counts()
    df_act_counts = df_activity.groupby([df_activity['time'].dt.hour, df_activity['activity']]).agg(activity=('activity', 'unique'), counts=('time', 'nunique'))

    sitting = []
    for i in range(24):
      try:
        sitting.append(df_act_counts.filter(items = [(i, 'Sitting')], axis = 0)['counts'].values[0])
      except:
        sitting.append(0)

    standing = []
    for i in range(24):
      try:
        standing.append(df_act_counts.filter(items = [(i, 'Standing')], axis = 0)['counts'].values[0])
      except:
        standing.append(0)

    walking = []
    for i in range(24):
      try:
        walking.append(df_act_counts.filter(items = [(i, 'Walking')], axis = 0)['counts'].values[0])
      except:
        walking.append(0)

    activityData = [sitting, standing, walking]

  try:
    df_angles = pd.read_csv(r'./data/angleList.txt', header=None, error_bad_lines=False)
  except:
    df_angles = pd.DataFrame()
  if not df_angles.empty:
    df_angles.dropna()
    df_angles.columns = ["time", "angle", "posture", "info"]
    df_angles['posture'].value_counts()
    postureRatio = [df_angles['posture'].value_counts().GOOD, df_angles['posture'].value_counts().BAD]
    df_angles['time'] = pd.to_datetime(df_angles['time'])  
    df_angles.groupby([df_angles['time'].dt.hour]).posture.value_counts()
    df_angle_counts = df_angles.groupby([df_angles['time'].dt.hour, df_angles['posture']]).agg(posture=('posture', 'unique'), counts=('time', 'nunique'))

    good = []
    for i in range(24):
      try:
        good.append(df_angle_counts.filter(items = [(i, 'GOOD')], axis = 0)['counts'].values[0])
      except:
        good.append(0)

    bad = []
    for i in range(24):
      try:
        bad.append(df_act_counts.filter(items = [(i, 'BAD')], axis = 0)['counts'].values[0])
      except:
        bad.append(0)

    postureData = [good, bad]


  response = {}
  response = jsonify({
      'postureRatio': str(postureRatio),
      'postureData': str(postureData),
      'activityRatio':str(activityRatio),
      'activityData': str(activityData),
  })
  response.headers.add("Access-Control-Allow-Origin", "*")
  response.headers.add("Access-Control-Allow-Headers", "*")
  response.headers.add("Access-Control-Allow-Methods", "*")

  print(response)
  return response

if __name__ == "__main__":
    flask_app.debug = True
    flask_app.run(debug=True)